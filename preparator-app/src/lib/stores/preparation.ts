// preparator-app/src/lib/stores/preparation.ts
// ‚úÖ Store de pr√©paration corrig√© pour compatibilit√© backend

import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import { apiClient } from '@/lib/api';
import type { 
  Preparation, 
  Agency, 
  VehicleFormData, 
  StepCompletionData, 
  IssueReportData,
  ApiResponse 
} from '@/lib/types';

interface PreparationStore {
  // √âtat
  currentPreparation: Preparation | null;
  userAgencies: Agency[];
  isLoading: boolean;
  error: string | null;

  // Actions principales
  startPreparation: (data: VehicleFormData) => Promise<void>;
  completeStep: (preparationId: string, data: StepCompletionData) => Promise<void>;
  completePreparation: (preparationId: string, notes?: string) => Promise<void>;
  reportIssue: (preparationId: string, data: IssueReportData) => Promise<void>;

  // Actions de r√©cup√©ration
  getCurrentPreparation: () => Promise<void>;
  getUserAgencies: () => Promise<void>;
  getPreparationHistory: (filters?: any) => Promise<any>;

  // Actions utilitaires
  clearError: () => void;
  reset: () => void;
}

export const usePreparationStore = create<PreparationStore>()(
  subscribeWithSelector((set, get) => ({
    // ===== √âTAT INITIAL =====
    currentPreparation: null,
    userAgencies: [],
    isLoading: false,
    error: null,

    // ===== ACTIONS PRINCIPALES =====

    // ‚úÖ D√©marrer une pr√©paration
    startPreparation: async (data: VehicleFormData) => {
      set({ isLoading: true, error: null });
      
      try {
        console.log('üöÄ D√©marrage pr√©paration:', data);
        
        const response = await apiClient.post<ApiResponse<{ preparation: Preparation }>>('/preparations/start', data);
        
        if (response.data.success && response.data.data) {
          set({ 
            currentPreparation: response.data.data.preparation,
            isLoading: false 
          });
          console.log('‚úÖ Pr√©paration d√©marr√©e:', response.data.data.preparation.id);
        } else {
          throw new Error(response.data.message || 'Erreur lors du d√©marrage');
        }
      } catch (error: any) {
        console.error('‚ùå Erreur d√©marrage pr√©paration:', error);
        const errorMessage = error.response?.data?.message || error.message || 'Erreur lors du d√©marrage de la pr√©paration';
        set({ error: errorMessage, isLoading: false });
        throw error;
      }
    },

    // ‚úÖ Compl√©ter une √©tape - CORRIG√â pour utiliser 'step'
    completeStep: async (preparationId: string, data: StepCompletionData) => {
      set({ isLoading: true, error: null });
      
      try {
        console.log('üì∏ Compl√©tion √©tape:', data.stepType, 'pour pr√©paration:', preparationId);
        
        const formData = new FormData();
        
        // ‚úÖ CORRECTION CRITIQUE: Utiliser 'step' comme attendu par le backend
        formData.append('step', data.stepType); // Backend attend 'step', pas 'stepType'
        
        if (data.photo) {
          formData.append('photo', data.photo);
          console.log('üì∑ Photo ajout√©e:', data.photo.name, `(${(data.photo.size / 1024 / 1024).toFixed(2)}MB)`);
        }
        
        if (data.notes) {
          formData.append('notes', data.notes);
        }

        const response = await apiClient.put<ApiResponse<{ preparation: Preparation }>>(
          `/preparations/${preparationId}/step`, 
          formData,
          {
            headers: { 
              'Content-Type': 'multipart/form-data' 
            }
          }
        );

        if (response.data.success && response.data.data) {
          set({ 
            currentPreparation: response.data.data.preparation,
            isLoading: false 
          });
          console.log('‚úÖ √âtape compl√©t√©e:', data.stepType);
        } else {
          throw new Error(response.data.message || 'Erreur lors de la compl√©tion');
        }
      } catch (error: any) {
        console.error('‚ùå Erreur compl√©tion √©tape:', error);
        const errorMessage = error.response?.data?.message || error.message || 'Erreur lors de la compl√©tion de l\'√©tape';
        set({ error: errorMessage, isLoading: false });
        throw error;
      }
    },

    // ‚úÖ Terminer une pr√©paration
    completePreparation: async (preparationId: string, notes?: string) => {
      set({ isLoading: true, error: null });
      
      try {
        console.log('üèÅ Finalisation pr√©paration:', preparationId);
        
        const response = await apiClient.post<ApiResponse<{ preparation: Preparation }>>(
          `/preparations/${preparationId}/complete`,
          { notes: notes || '' }
        );

        if (response.data.success && response.data.data) {
          set({ 
            currentPreparation: response.data.data.preparation,
            isLoading: false 
          });
          console.log('‚úÖ Pr√©paration termin√©e');
        } else {
          throw new Error(response.data.message || 'Erreur lors de la finalisation');
        }
      } catch (error: any) {
        console.error('‚ùå Erreur finalisation:', error);
        const errorMessage = error.response?.data?.message || error.message || 'Erreur lors de la finalisation';
        set({ error: errorMessage, isLoading: false });
        throw error;
      }
    },

    // ‚úÖ Signaler un incident
    reportIssue: async (preparationId: string, data: IssueReportData) => {
      set({ isLoading: true, error: null });
      
      try {
        console.log('‚ö†Ô∏è Signalement incident:', data.type);
        
        const formData = new FormData();
        formData.append('type', data.type);
        formData.append('description', data.description);
        formData.append('severity', data.severity || 'medium');
        
        if (data.photo) {
          formData.append('photo', data.photo);
        }

        const response = await apiClient.post<ApiResponse<{ preparation: Preparation }>>(
          `/preparations/${preparationId}/issue`,
          formData,
          {
            headers: { 
              'Content-Type': 'multipart/form-data' 
            }
          }
        );

        if (response.data.success && response.data.data) {
          set({ 
            currentPreparation: response.data.data.preparation,
            isLoading: false 
          });
          console.log('‚úÖ Incident signal√©');
        } else {
          throw new Error(response.data.message || 'Erreur lors du signalement');
        }
      } catch (error: any) {
        console.error('‚ùå Erreur signalement incident:', error);
        const errorMessage = error.response?.data?.message || error.message || 'Erreur lors du signalement';
        set({ error: errorMessage, isLoading: false });
        throw error;
      }
    },

    // ===== ACTIONS DE R√âCUP√âRATION =====

    // ‚úÖ R√©cup√©rer la pr√©paration en cours
    getCurrentPreparation: async () => {
      set({ isLoading: true, error: null });
      
      try {
        const response = await apiClient.get<ApiResponse<{ preparation: Preparation }>>('/preparations/current');
        
        if (response.data.success && response.data.data) {
          set({ 
            currentPreparation: response.data.data.preparation,
            isLoading: false 
          });
        } else {
          // Pas de pr√©paration en cours n'est pas une erreur
          set({ 
            currentPreparation: null,
            isLoading: false 
          });
        }
      } catch (error: any) {
        console.error('‚ùå Erreur r√©cup√©ration pr√©paration courante:', error);
        // Ne pas mettre d'erreur si pas de pr√©paration en cours
        if (error.response?.status === 404) {
          set({ currentPreparation: null, isLoading: false });
        } else {
          const errorMessage = error.response?.data?.message || 'Erreur lors de la r√©cup√©ration';
          set({ error: errorMessage, isLoading: false });
        }
      }
    },

    // ‚úÖ R√©cup√©rer les agences de l'utilisateur
    getUserAgencies: async () => {
      try {
        const response = await apiClient.get<ApiResponse<{ agencies: Agency[] }>>('/preparations/user-agencies');
        
        if (response.data.success && response.data.data) {
          set({ userAgencies: response.data.data.agencies });
          console.log('‚úÖ Agences r√©cup√©r√©es:', response.data.data.agencies.length);
        }
      } catch (error: any) {
        console.error('‚ùå Erreur r√©cup√©ration agences:', error);
        // Les agences ne sont pas critiques pour le fonctionnement
      }
    },

    // ‚úÖ R√©cup√©rer l'historique des pr√©parations
    getPreparationHistory: async (filters = {}) => {
      set({ isLoading: true, error: null });
      
      try {
        const params = new URLSearchParams();
        
        if (filters.startDate) {
          params.append('startDate', filters.startDate.toISOString());
        }
        if (filters.endDate) {
          params.append('endDate', filters.endDate.toISOString());
        }
        if (filters.agencyId) {
          params.append('agencyId', filters.agencyId);
        }
        if (filters.search) {
          params.append('search', filters.search);
        }
        
        const response = await apiClient.get(`/preparations/history?${params.toString()}`);
        
        set({ isLoading: false });
        return response.data;
      } catch (error: any) {
        console.error('‚ùå Erreur r√©cup√©ration historique:', error);
        const errorMessage = error.response?.data?.message || 'Erreur lors de la r√©cup√©ration de l\'historique';
        set({ error: errorMessage, isLoading: false });
        throw error;
      }
    },

    // ===== ACTIONS UTILITAIRES =====

    // ‚úÖ Effacer l'erreur
    clearError: () => {
      set({ error: null });
    },

    // ‚úÖ Reset du store
    reset: () => {
      set({
        currentPreparation: null,
        userAgencies: [],
        isLoading: false,
        error: null
      });
    }
  }))
);

// ===== HOOKS UTILITAIRES =====

// ‚úÖ Hook pour obtenir les statistiques de la pr√©paration courante
export const usePreparationStats = () => {
  const currentPreparation = usePreparationStore(state => state.currentPreparation);
  
  if (!currentPreparation) {
    return null;
  }
  
  const completedSteps = currentPreparation.steps.filter(step => step.completed).length;
  const totalSteps = currentPreparation.steps.length;
  const nextStep = currentPreparation.steps.find(step => !step.completed);
  
  return {
    completedSteps,
    totalSteps,
    progress: currentPreparation.progress,
    nextStep: nextStep?.step || null,
    duration: currentPreparation.currentDuration,
    isOnTime: currentPreparation.isOnTime,
    canComplete: completedSteps === totalSteps
  };
};

// ‚úÖ Hook pour obtenir l'√©tape suivante
export const useNextStep = () => {
  const currentPreparation = usePreparationStore(state => state.currentPreparation);
  
  if (!currentPreparation) return null;
  
  return currentPreparation.steps.find(step => !step.completed) || null;
};