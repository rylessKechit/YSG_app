// backend/src/routes/admin/reports/preparations.js - VERSION CORRIG√âE BAS√âE SUR L'ANCIEN
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const { auth } = require('../../../middleware/auth');
const { adminAuth } = require('../../../middleware/adminAuth');
const ExcelJS = require('exceljs');
const Preparation = require('../../../models/Preparation');
const Agency = require('../../../models/Agency');

// Middleware
router.use(auth, adminAuth);

/**
 * @route   GET /api/admin/reports/preparations-steps
 * @desc    Rapport des pr√©parations par √©tapes pour une agence - VERSION MODIFI√âE VP/VU
 * @access  Admin
 */
router.get('/', async (req, res) => {
  try {
    const { agencyId, startDate, endDate, format = 'json' } = req.query;

    // Validation des param√®tres requis
    if (!agencyId) {
      return res.status(400).json({
        success: false,
        message: 'L\'ID de l\'agence est requis'
      });
    }

    if (!startDate || !endDate) {
      return res.status(400).json({
        success: false,
        message: 'Les dates de d√©but et fin sont requises'
      });
    }

    // Validation des dates
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      return res.status(400).json({
        success: false,
        message: 'Format de date invalide'
      });
    }

    if (start > end) {
      return res.status(400).json({
        success: false,
        message: 'La date de d√©but doit √™tre ant√©rieure √† la date de fin'
      });
    }

    // V√©rifier que l'agence existe
    const agency = await Agency.findById(agencyId);
    if (!agency) {
      return res.status(404).json({
        success: false,
        message: 'Agence non trouv√©e'
      });
    }

    // Ajuster les dates pour inclure toute la journ√©e
    start.setHours(0, 0, 0, 0);
    end.setHours(23, 59, 59, 999);

    console.log(`üìä G√©n√©ration rapport pr√©parations - Agence: ${agency.name}, P√©riode: ${start.toDateString()} -> ${end.toDateString()}`);

    // Utiliser une requ√™te MongoDB directe pour √©viter les erreurs de cast
    const preparations = await mongoose.connection.db.collection('preparations').find({
      agency: new mongoose.Types.ObjectId(agencyId),
      createdAt: {
        $gte: start,
        $lte: end
      }
    }).toArray();

    console.log(`üìã ${preparations.length} pr√©parations trouv√©es`);

    // Populate manuellement les r√©f√©rences pour √©viter les erreurs
    const User = require('../../../models/User');
    const Vehicle = require('../../../models/Vehicle');

    // R√©cup√©rer les utilisateurs
    const userIds = preparations
      .map(p => p.user)
      .filter(id => id && mongoose.Types.ObjectId.isValid(id));
    const users = await User.find({ _id: { $in: userIds } }).lean();
    const usersMap = users.reduce((acc, user) => {
      acc[user._id.toString()] = user;
      return acc;
    }, {});

    // R√©cup√©rer les v√©hicules
    const vehicleIds = preparations
      .map(p => p.vehicle)
      .filter(id => id && mongoose.Types.ObjectId.isValid(id));
    const vehicles = await Vehicle.find({ _id: { $in: vehicleIds } }).lean();
    const vehiclesMap = vehicles.reduce((acc, vehicle) => {
      acc[vehicle._id.toString()] = vehicle;
      return acc;
    }, {});

    // ‚úÖ NOUVELLES M√âTRIQUES S√âPAR√âES VP/VU
    const metrics = {
      totalPreparations: preparations.length,
      vpExteriorOrInterior: 0,  // ‚úÖ NOUVEAU : VP seulement
      vuExteriorOrInterior: 0,  // ‚úÖ NOUVEAU : VU seulement
      fuel: 0,
      specialWash: 0,
      details: []
    };

    // Analyser chaque pr√©paration
    preparations.forEach(prep => {
      const steps = prep.steps || [];
      
      // V√©rifier les √©tapes TERMIN√âES seulement (completed: true)
      const hasExterior = steps.some(step => step.step === 'exterior' && step.completed === true);
      const hasInterior = steps.some(step => step.step === 'interior' && step.completed === true);
      const hasFuel = steps.some(step => step.step === 'fuel' && step.completed === true);
      const hasSpecialWash = steps.some(step => step.step === 'special_wash' && step.completed === true);

      // ‚úÖ D√âTERMINER LE TYPE DE V√âHICULE
      let vehicleType = 'particulier'; // d√©faut
      
      // Chercher dans vehicleData d'abord (nouveau sch√©ma)
      if (prep.vehicleData && prep.vehicleData.vehicleType) {
        vehicleType = prep.vehicleData.vehicleType;
      }
      // Puis dans vehicleInfo (ancien sch√©ma)  
      else if (prep.vehicleInfo && prep.vehicleInfo.vehicleType) {
        vehicleType = prep.vehicleInfo.vehicleType;
      }
      // Enfin dans vehicle populate
      else if (prep.vehicle && mongoose.Types.ObjectId.isValid(prep.vehicle)) {
        const vehicle = vehiclesMap[prep.vehicle.toString()];
        if (vehicle && vehicle.vehicleType) {
          vehicleType = vehicle.vehicleType;
        }
      }

      // ‚úÖ COMPTER S√âPAR√âMENT VP ET VU POUR NETTOYAGE
      if (hasExterior || hasInterior) {
        if (vehicleType === 'particulier') {
          metrics.vpExteriorOrInterior++;
        } else if (vehicleType === 'utilitaire') {
          metrics.vuExteriorOrInterior++;
        }
      }

      // Compter les autres m√©triques (inchang√©es)
      if (hasFuel) {
        metrics.fuel++;
      }
      if (hasSpecialWash) {
        metrics.specialWash++;
      }

      // D√©tails pour export Excel (compatible avec ancien et nouveau sch√©ma)
      const getVehiclePlate = (prep) => {
        // Priorit√© : vehicleData > vehicleInfo > vehicle populate > fallback
        if (prep.vehicleData && prep.vehicleData.licensePlate) {
          return prep.vehicleData.licensePlate;
        } else if (prep.vehicleInfo && prep.vehicleInfo.licensePlate) {
          return prep.vehicleInfo.licensePlate;
        } else if (prep.vehicle && mongoose.Types.ObjectId.isValid(prep.vehicle)) {
          const vehicle = vehiclesMap[prep.vehicle.toString()];
          if (vehicle && vehicle.licensePlate) {
            return vehicle.licensePlate;
          }
        }
        return 'N/A';
      };

      const getUserInfo = (prep) => {
        if (prep.user && mongoose.Types.ObjectId.isValid(prep.user)) {
          const user = usersMap[prep.user.toString()];
          if (user && user.firstName) {
            return `${user.firstName} ${user.lastName || ''}`;
          }
        }
        return 'N/A';
      };

      metrics.details.push({
        id: prep._id,
        plaque: getVehiclePlate(prep),
        preparateur: getUserInfo(prep),
        vehicleType, // ‚úÖ NOUVEAU : Type de v√©hicule ajout√©
        hasExterior,
        hasInterior,
        hasFuel,
        hasSpecialWash
      });
    });

    const reportData = {
      agence: {
        id: agency._id,
        nom: agency.name,
        code: agency.code
      },
      periode: {
        debut: startDate,
        fin: endDate,
        jours: Math.ceil((end - start) / (1000 * 60 * 60 * 24))
      },
      metriques: metrics,
      genereA: new Date(),
      generePar: req.user.email
    };

    // Format Excel demand√©
    if (format === 'excel') {
      const buffer = await generateExcelReport(reportData);
      
      const filename = `rapport-preparations-${agency.code}-${start.toISOString().split('T')[0]}-${end.toISOString().split('T')[0]}.xlsx`;
      
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
      
      return res.send(buffer);
    }

    // Format JSON par d√©faut
    res.json({
      success: true,
      data: reportData,
      message: 'Rapport g√©n√©r√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration rapport pr√©parations:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la g√©n√©ration du rapport',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * ‚úÖ FONCTION CORRIG√âE : generateExcelReport - BAS√âE SUR L'ANCIEN QUI MARCHAIT
 * Changements : VP/VU s√©par√©s + suppression "Date cr√©ation" + ajout "Type de v√©hicule"
 */
async function generateExcelReport(reportData) {
  const workbook = new ExcelJS.Workbook();
  
  // M√©tadonn√©es (identiques √† l'ancien)
  workbook.creator = 'Syst√®me de Gestion V√©hicules';
  workbook.created = new Date();
  workbook.title = `Rapport Pr√©parations - ${reportData.agence.nom}`;

  // ===== ONGLET 1: R√âSUM√â (STRUCTURE IDENTIQUE √Ä L'ANCIEN) =====
  const summarySheet = workbook.addWorksheet('üìä R√©sum√©', {
    pageSetup: {
      paperSize: 9, // A4
      orientation: 'portrait',
      fitToPage: true,
      fitToWidth: 1,
      fitToHeight: 0,
      printArea: 'A1:B30'
    },
    properties: {
      defaultColWidth: 20
    },
    views: [
      {
        state: 'normal',
        rightToLeft: false,
        activeCell: 'A1',
        selection: [{ sq: 'A1:B30' }]
      }
    ]
  });

  // En-t√™te principal (identique √† l'ancien)
  summarySheet.mergeCells('A1:B1');
  const titleCell = summarySheet.getCell('A1');
  titleCell.value = `üìä Rapport Pr√©parations - ${reportData.agence.nom}`;
  titleCell.font = { size: 16, bold: true, color: { argb: 'FFFFFF' } };
  titleCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4472C4' } };
  titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
  summarySheet.getRow(1).height = 35;

  // Informations g√©n√©rales (identiques √† l'ancien)
  summarySheet.addRow([]);
  summarySheet.addRow(['üìÖ P√âRIODE', `${reportData.periode.debut} ‚Üí ${reportData.periode.fin}`]);
  summarySheet.addRow(['üè¢ AGENCE', `${reportData.agence.nom} (${reportData.agence.code})`]);
  summarySheet.addRow(['üìä G√âN√âR√â LE', reportData.genereA.toLocaleString('fr-FR')]);

  // M√©triques principales
  summarySheet.addRow([]);
  
  // Titre "M√âTRIQUES" (identique √† l'ancien)
  const metricsRowNum = summarySheet.rowCount + 1;
  summarySheet.addRow(['üìà M√âTRIQUES']);
  summarySheet.mergeCells(`A${metricsRowNum}:B${metricsRowNum}`);
  summarySheet.getRow(metricsRowNum).getCell(1).font = { bold: true, size: 12 };
  summarySheet.getRow(metricsRowNum).getCell(1).alignment = { horizontal: 'center', vertical: 'middle' };
  
  const metricsStartRow = summarySheet.rowCount + 1;
  
  // ‚úÖ NOUVELLES LIGNES S√âPAR√âES VP/VU (au lieu de l'ancienne ligne globale)
  summarySheet.addRow(['üöó VP Nettoyage int√©rieur / ext√©rieur', reportData.metriques.vpExteriorOrInterior || 0]);
  summarySheet.addRow(['üöö VU Nettoyage int√©rieur / ext√©rieur', reportData.metriques.vuExteriorOrInterior || 0]);
  summarySheet.addRow(['‚õΩ Carburant', reportData.metriques.fuel]);
  summarySheet.addRow(['‚ú® Lavage sp√©cial', reportData.metriques.specialWash]);

  // Style des m√©triques (identique √† l'ancien)
  for (let i = metricsStartRow; i <= summarySheet.rowCount; i++) {
    summarySheet.getCell(`A${i}`).font = { bold: true };
    summarySheet.getCell(`B${i}`).font = { bold: true, color: { argb: '0066CC' } };
  }

  // Pourcentages
  summarySheet.addRow([]);
  
  // Titre "POURCENTAGES" (identique √† l'ancien)
  const percentagesRowNum = summarySheet.rowCount + 1;
  summarySheet.addRow(['üìä POURCENTAGES']);
  summarySheet.mergeCells(`A${percentagesRowNum}:B${percentagesRowNum}`);
  summarySheet.getRow(percentagesRowNum).getCell(1).font = { bold: true, size: 12 };
  summarySheet.getRow(percentagesRowNum).getCell(1).alignment = { horizontal: 'center', vertical: 'middle' };
  
  const total = reportData.metriques.totalPreparations;
  if (total > 0) {
    // ‚úÖ NOUVEAUX POURCENTAGES S√âPAR√âS VP/VU
    summarySheet.addRow(['üöó % VP Nettoyage', `${Math.round(((reportData.metriques.vpExteriorOrInterior || 0) / total) * 100)}%`]);
    summarySheet.addRow(['üöö % VU Nettoyage', `${Math.round(((reportData.metriques.vuExteriorOrInterior || 0) / total) * 100)}%`]);
    summarySheet.addRow(['‚õΩ % Carburant', `${Math.round((reportData.metriques.fuel / total) * 100)}%`]);
    summarySheet.addRow(['‚ú® % Lavage sp√©cial', `${Math.round((reportData.metriques.specialWash / total) * 100)}%`]);
  }

  // ‚úÖ AM√âLIORATION : Cellules plus hautes et centr√©es (identique √† l'ancien)
  summarySheet.eachRow((row, rowNumber) => {
    row.height = 25;
    row.eachCell((cell) => {
      cell.alignment = { 
        horizontal: 'center', 
        vertical: 'middle',
        wrapText: true 
      };
    });
  });

  // Ajuster les colonnes (identique √† l'ancien)
  summarySheet.getColumn('A').width = 30;
  summarySheet.getColumn('B').width = 25;
  
  // ‚úÖ MASQUER TOUTES les colonnes apr√®s B (identique √† l'ancien)
  for (let col = 3; col <= 100; col++) {
    summarySheet.getColumn(col).hidden = true;
    summarySheet.getColumn(col).width = 0;
  }

  // ===== ONGLET 2: D√âTAILS (MODIFI√â SELON VOS DEMANDES) =====
  const detailsSheet = workbook.addWorksheet('üìã D√©tails');

  // ‚úÖ NOUVEAUX EN-T√äTES : Supprim√© "Date Cr√©ation", Ajout√© "Type de v√©hicule"
  const headers = [
    'Plaque',
    'Pr√©parateur', 
    'Type de v√©hicule', // ‚úÖ NOUVEAU
    'Exterior',
    'Interior',
    'Fuel',
    'Special Wash'
    // ‚ùå SUPPRIM√â : Date Cr√©ation
  ];

  detailsSheet.addRow(headers);
  
  // Style en-t√™tes (identique √† l'ancien)
  const headerRow = detailsSheet.getRow(1);
  headerRow.font = { bold: true, color: { argb: 'FFFFFF' } };
  headerRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '4472C4' } };
  headerRow.alignment = { horizontal: 'center', vertical: 'middle' };
  headerRow.height = 30;

  // ‚úÖ DONN√âES D√âTAILL√âES MODIFI√âES
  reportData.metriques.details.forEach(detail => {
    const row = detailsSheet.addRow([
      detail.plaque,
      detail.preparateur,
      detail.vehicleType === 'particulier' ? 'V√©hicule Particulier' : 'V√©hicule Utilitaire', // ‚úÖ NOUVEAU
      detail.hasExterior ? '‚úÖ' : '‚ùå',
      detail.hasInterior ? '‚úÖ' : '‚ùå', 
      detail.hasFuel ? '‚úÖ' : '‚ùå',
      detail.hasSpecialWash ? '‚úÖ' : '‚ùå'
      // ‚ùå SUPPRIM√â : detail.dateCreation
    ]);
    
    // Style identique √† l'ancien
    row.height = 25;
    row.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
  });

  // Ajuster les colonnes (identique √† l'ancien)
  detailsSheet.columns.forEach((column, index) => {
    column.width = index === 0 ? 20 : 15; // Plaque plus large
    column.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
  });

  // ‚úÖ RETOURNER LE BUFFER (identique √† l'ancien)
  const buffer = await workbook.xlsx.writeBuffer();
  return buffer;
}

module.exports = router;